name: Scan Images for Vulnerabilities (Trivy)
run-name: Scan ${{ inputs.version }} Images for Vulnerabilities (${{ github.event_name == 'schedule' && '(scheduled)' || '' }})
on:
  schedule:
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: "Version of Eraser to run Trivy scans against. Leave empty to scan images built from the branch the action is running against."
        type: string
        required: false
        default: ""
      upload-results:
        description: "If set to true, uploads results to the GitHub Security tab."
        type: boolean
        required: true
        default: false

permissions: read-all

env:
  REGISTRY: ghcr.io
  # Scanning released versions require the project `eraser-dev` as part of the repo name.
  REGISTRY_POSTFIX: ${{ github.event.inputs.version == '' && 'eraser-test' || 'eraser-dev' }}
  TAG: ${{ github.event.inputs.version == '' && 'test' || github.event.inputs.version }}

jobs:
  build_containers:
    if: github.event_name == 'schedule' || github.event.inputs.version == ''
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit

      - name: Check out code into the Go module directory
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Build eraser-manager
        run: make docker-build-manager MANAGER_REPO=${{ env.REGISTRY }}/${{ env.REGISTRY_POSTFIX }}/eraser-manager MANAGER_TAG=${{ env.TAG }}

      - name: Build remover
        run: make docker-build-remover REMOVER_REPO=${{ env.REGISTRY }}/${{ env.REGISTRY_POSTFIX }}/remover REMOVER_TAG=${{ env.TAG }}

      - name: Build collector
        run: make docker-build-collector COLLECTOR_REPO=${{ env.REGISTRY }}/${{ env.REGISTRY_POSTFIX }}/collector COLLECTOR_TAG=${{ env.TAG }}

      - name: Build trivy-scanner
        run: make docker-build-trivy-scanner TRIVY_SCANNER_REPO=${{ env.REGISTRY }}/${{ env.REGISTRY_POSTFIX }}/eraser-trivy-scanner TRIVY_SCANNER_TAG=${{ env.TAG }}

  scan_vulnerabilities:
    name: Scan ${{ matrix.image }} for vulnerabilities 
    strategy:
      matrix:
        image: [remover, eraser-manager, collector, eraser-trivy-scanner]
    # We scan for vulnerabilites after containers are built when scanning a branch (empty `version`).
    needs: build_containers
    # Due to the above `needs`, we need to do a conditional check to allow for runs that skipped 'build_containers' to run this job.
    # https://github.com/actions/runner/issues/491#issuecomment-850884422
    if: always() && (needs.build_containers.result == 'success' || needs.build_containers.result == 'skipped')
    runs-on: ubuntu-latest      
    timeout-minutes: 15
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@fbd16365eb88e12433951383f5e99bd901fc618f #0.12.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_POSTFIX }}/${{ matrix.image }}:${{ env.TAG }}
          vuln-type: 'os,library'
          ignore-unfixed: true
          format: 'sarif'
          output: ${{ matrix.image }}-results.sarif
 
  upload_vulnerabilities:
    name: Upload ${{ matrix.image }} results to GitHub Security
    runs-on: ubuntu-latest
    needs: scan_vulnerabilities
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload-results == 'true')
    strategy:
      matrix:
        image: [remover, eraser-manager, collector, eraser-trivy-scanner]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ matrix.image }}-results.sarif
